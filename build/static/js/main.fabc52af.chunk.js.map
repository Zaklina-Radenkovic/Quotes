{"version":3,"sources":["components/quotes/QuoteForm.module.css","components/layout/MainNavigation.module.css","components/comments/NewCommentForm.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.module.css","components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/UI/Card.module.css","components/UI/LoadingSpinner.module.css","components/layout/Layout.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/Comments.js","pages/QuoteDetail.js","components/UI/Card.js","components/UI/LoadingSpinner.js","components/quotes/QuoteForm.js","pages/NewQuote.js","components/layout/MainNavigation.js","components/layout/Layuot.js","pages/NotFound.js","App.js","index.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","list","map","quote","AllQuotes","HighlightedQuote","NewCommentForm","commentTextRef","useRef","submitFormHandler","event","preventDefault","form","onSubmit","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","comments","DUMMY_QUOTES","QuoteDetail","params","useParams","find","q","quoteId","console","log","path","exact","Card","card","children","LoadingSpinner","spinner","QuoteForm","isEntering","setIsEntering","authorInputRef","textInputRef","when","message","enteredAuthor","current","value","enteredText","onAddQuote","onFocus","isLoading","loading","type","NewQuote","quoteData","onAddNewQuote","MainNavigation","header","logo","nav","activeClassName","active","Layout","main","NotFound","App","allQuotes","setAllQuotes","newQuote","prev","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fabc52af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__13vyp\",\"loading\":\"QuoteForm_loading__2npwd\",\"control\":\"QuoteForm_control__1duGN\",\"actions\":\"QuoteForm_actions__3VnkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__2Vv0s\",\"logo\":\"MainNavigation_logo__3W9K_\",\"nav\":\"MainNavigation_nav__sHC1c\",\"active\":\"MainNavigation_active__3ZI7k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2T-0D\",\"loading\":\"NewCommentForm_loading__Dn4iF\",\"control\":\"NewCommentForm_control__1U9uB\",\"actions\":\"NewCommentForm_actions__2Lwm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__AtEgE\",\"sorting\":\"QuoteList_sorting__3Bdsf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3Xjf6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__26Cjd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1Xn6s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__FMHle\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2KU2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__3mix0\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  // console.log(location);\n\n  const queryParams = new URLSearchParams(location.search);\n  // console.log(queryParams);\n  const isSortAscending = queryParams.get(\"sort\") === \"asc\";\n  // console.log(isSortAscending);\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n\n  const changeSortingHandler = () => {\n    // history.push(\"/quotes?sort=asc\");\n\n    // making dynamically\n    history.push(\"/quotes?sort=\" + (isSortAscending ? \"desc\" : \"asc\"));\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import QuoteList from \"../components/quotes/QuoteList\";\r\n\r\nconst AllQuotes = (props) => {\r\n  return (\r\n    <>\r\n      <QuoteList quotes={props.quotes} />\r\n    </>\r\n  );\r\n};\r\nexport default AllQuotes;\r\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef } from 'react';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState } from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm />}\n      <p>Comments...</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Route, useParams, Link } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\n\r\nconst DUMMY_QUOTES = [\r\n  {\r\n    id: \"q1\",\r\n    author: \"Me\",\r\n    text: \"Learning React is fun!\",\r\n  },\r\n  { id: \"q2\", author: \"Bata\", text: \"Learning English is amusing!\" },\r\n];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n\r\n  //we want to show text depending on id\r\n  const quote = DUMMY_QUOTES.find((q) => q.id === params.quoteId); //returns object\r\n  console.log(quote);\r\n\r\n  //if there is no quote\r\n  if (!quote) return <p>No quoutes</p>;\r\n\r\n  return (\r\n    <section>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n      <Route path={`/quotes/${params.quoteId}`} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`/quotes/${params.quoteId}/comments`} className=\"btn--flat\">\r\n            Load comments...\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`/quotes/${params.quoteId}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </section>\r\n  );\r\n};\r\nexport default QuoteDetail;\r\n","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  //checking if form is in focus\n  const formFocusedHandler = () => {\n    console.log(\"focus\");\n    setIsEntering(true);\n  };\n\n  return (\n    <>\n      <Prompt when={isEntering} message={(location) => \"Are you sure?\"} />\n      <Card>\n        <form\n          className={classes.form}\n          onSubmit={submitFormHandler}\n          onFocus={formFocusedHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={() => setIsEntering(false)} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\n\r\nconst NewQuote = (props) => {\r\n  const history = useHistory();\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    console.log(quoteData);\r\n    // props.setAllQuotes(quoteData);\r\n\r\n    props.onAddNewQuote(quoteData);\r\n\r\n    history.push(\"/quotes\");\r\n  };\r\n\r\n  return <QuoteForm onAddQuote={addQuoteHandler} />;\r\n};\r\nexport default NewQuote;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport classes from \"./MainNavigation.module.css\";\r\n\r\nconst MainNavigation = () => {\r\n  return (\r\n    <header className={classes.header}>\r\n      <div className={classes.logo}>Great Quotes</div>\r\n      <nav className={classes.nav}>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/quotes\" activeClassName={classes.active}>\r\n              All quotes\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/new-quote\" activeClassName={classes.active}>\r\n              Add a quote\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\nexport default MainNavigation;\r\n","import MainNavigation from \"./MainNavigation\";\r\nimport classes from \"./Layout.module.css\";\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      <MainNavigation />\r\n      <main className={classes.main}>{children}</main>\r\n    </>\r\n  );\r\n};\r\nexport default Layout;\r\n","const NotFound = () => <p>Page not found!</p>;\r\nexport default NotFound;\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport AllQuotes from \"./pages/AllQuotes\";\nimport QuoteDetail from \"./pages/QuoteDetail\";\nimport NewQuote from \"./pages/NewQuote\";\nimport Layout from \"./components/layout/Layuot\";\nimport NotFound from \"./pages/NotFound\";\nimport { useState } from \"react\";\n\nconst DUMMY_QUOTES = [\n  {\n    id: \"q1\",\n    author: \"Nelson Mandela\",\n    text: \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n  },\n  {\n    id: \"q2\",\n    author: \"Benjamin Franklin\",\n    text: \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\n  },\n  {\n    id: \"q3\",\n    author: \"Albert Einstein\",\n    text: \"Life is like riding a bicycle. To keep your balance, you must keep moving.\",\n  },\n];\n\nfunction App() {\n  const [allQuotes, setAllQuotes] = useState(DUMMY_QUOTES);\n\n  const addNewQuote = (newQuote) => {\n    setAllQuotes((prev) => {\n      return [...prev, newQuote];\n    });\n  };\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/quotes\" />\n        </Route>\n        <Route path=\"/quotes\" exact>\n          <AllQuotes quotes={allQuotes} />\n        </Route>\n        <Route path=\"/quotes/:quoteId\">\n          <QuoteDetail />\n        </Route>\n        <Route path=\"/new-quote\">\n          <NewQuote\n            quotes={allQuotes}\n            setAllQuotes={setAllQuotes}\n            onAddNewQuote={addNewQuote}\n          />\n        </Route>\n        <Route path=\"*\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n"],"sourceRoot":""}